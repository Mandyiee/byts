(function(){"use strict";function w(n,a,g,s,e){let l=`const uint8_t ${a}[] PROGMEM = {
  `;const o=Math.ceil(g/8)*s;let t=0,r=0;for(let h=0;h<s;h++)for(let i=0;i<g;i+=8){let u=0;for(let f=0;f<8;f++)if(i+f<g){const d=(h*g+i+f)*4;Math.round(.299*n[d]+.587*n[d+1]+.114*n[d+2])<69&&(u|=1<<7-f)}l+=`0x${u.toString(16).padStart(2,"0")}`,t++,r++,r>=16&&t<o?(l+=`,
  `,r=0):t<o&&(l+=", ")}return l+=`
};`,{formattedCode:l}}function I(n,a,g,s){let e=`const uint16_t ${a}[] = {
  `;const l=g*s;let c=0,o=0;for(let t=0;t<n.length;t+=4){let r=n[t]>>3,h=n[t+1]>>2,i=n[t+2]>>3,u=(r<<11|h<<5|i)>>>0;e+=`0x${(u&65535).toString(16).padStart(4,"0")}`,c++,o++,o>=12&&c<l?(e+=`,
  `,o=0):c<l&&(e+=", ")}return e+=`
};`,{formattedCode:e}}function M(n,a,g,s){let e=`const uint32_t ${a}[] = {
  `;const l=g*s;let c=0,o=0;for(let t=0;t<n.length;t+=4){let r=n[t],h=n[t+1],i=n[t+2];const u=(r<<16|h<<8|i)>>>0;e+=`0x${u.toString(16).padStart(6,"0").padStart(8,"0")}`,c++,o++,o>=10&&c<l?(e+=`,
  `,o=0):c<l&&(e+=", ")}return e+=`
};`,{formattedCode:e}}function S(n,a,g,s){let e=`const uint32_t ${a}[] = {
  `;const l=g*s;let c=0,o=0;for(let t=0;t<n.length;t+=4){let r=n[t],h=n[t+1],i=n[t+2],u=n[t+3];const f=(r<<24|h<<16|i<<8|u)>>>0;e+=`0x${f.toString(16).padStart(8,"0")}`,c++,o++,o>=12&&c<l?(e+=`,
  `,o=0):c<l&&(e+=", ")}return e+=`
};`,{formattedCode:e}}const $={grayscale:w,rgb565:I,rgb888:M,rgba8888:S};self.onmessage=function(n){var a,g;try{console.log("Worker received task:",n.data);const{task:s}=n.data;if(!(s!=null&&s.image))throw new Error("No image provided to worker");const e=s.image,l=e.width,c=e.height;fetch(e.url).then(o=>o.blob()).then(o=>createImageBitmap(o,0,0,e.width,e.height)).then(o=>{var p,y,v,C,x;let t=l,r=c;if(((p=e.config)==null?void 0:p.canvasWidth)>0&&((y=e.config)==null?void 0:y.canvasHeight)>0)t=e.config.canvasWidth,r=e.config.canvasHeight;else if(((v=e.config)==null?void 0:v.canvasWidth)>0){const b=c/l;t=e.config.canvasWidth,r=Math.round(t*b)}else if(((C=e.config)==null?void 0:C.canvasHeight)>0){const b=l/c;r=e.config.canvasHeight,t=Math.round(r*b)}const i=new OffscreenCanvas(t,r).getContext("2d",{willReadFrequently:!0});if(i.fillStyle=((x=e.config)==null?void 0:x.backgroundColor)||"#ffffff",i.fillRect(0,0,t,r),e.config.flipHorizontal||e.config.flipVertical||e.config.rotation){i.save(),i.translate(t/2,r/2),e.config.rotation&&i.rotate(e.config.rotation*Math.PI/180);const b=e.config.flipHorizontal?-1:1,L=e.config.flipVertical?-1:1;i.scale(b,L),i.globalCompositeOperation="source-over",i.drawImage(o,-t/2,-r/2,t,r),i.restore()}else i.globalCompositeOperation="source-over",i.drawImage(o,0,0,t,r);let f=i.getImageData(0,0,t,r).data;e.config.invertColors&&(f=D(f));const d=e.config.pixelEncoding||"rgb565",m=$[d](f,e.name,t,r,e.config.threshold);o.close(),self.postMessage({type:"complete",name:e.name,encoding:d,width:t,height:r,data:m.formattedCode})}).catch(o=>{self.postMessage({type:"error",name:e.name,error:`Failed to process image: ${o.message}`})})}catch(s){console.error("Worker error:",s),self.postMessage({type:"error",name:((g=(a=n.data.task)==null?void 0:a.image)==null?void 0:g.name)||"unknown",error:s.message})}};function D(n){for(let a=0;a<n.length;a+=4)n[a]=255-n[a],n[a+1]=255-n[a+1],n[a+2]=255-n[a+2];return n}console.log("Image processing worker initialized")})();
